#include "aes.h"

#define BLOCK_SIZE 16
#define ROUNDS 10
#define EXPANDED_KEY_SIZE 176

typedef obliv unsigned char obl_char;

typedef struct {
  obl_char state[BLOCK_SIZE];
} AesState;

obl_char mulrj(obl_char a, obl_char b) {
  obl_char p = 0, a2;
  for (int i = 0; i < 8; ++i) {
    obliv if((b & (1<<i)) != 0) {
      p ^= a; // FIXME int conditions don't work
    }
    obliv int res;
    a2 = (a << 1);
    obliv if((a & (1<<7)) != 0) {
      a2 ^= 0x1b; // TODO bit-level identities should have made this free
    }
    a = a2;
  }
  return p;
}

obl_char exprj(obl_char a, int pow) {
  return pow != 0 ? mulrj(exprj(mulrj(a, a), pow / 2), (pow % 2 ? a : 1)) : 1;
}

obl_char invrj(obl_char a) {
  return exprj(a, 254);
}

obl_char *mat(AesState *s, int i, int j) {
  return s->state + i + j*4;
}

void aesShiftRows(AesState *s) {
  int i,j;

  for (i = 1; i < 4; ++i) {
    obl_char t[4];

    for (j = 0; j < 4; ++j) {
      t[j]=*mat(s, i, j);
    }
    for (j = 0; j < 4; ++j) {
      *mat(s, i, j) = t[(i+j) %4];
    }
  }
}

void aesMixCols(AesState *s) {
  AesState res;
  int i, j, k;
  const unsigned char mixer[4] = {2, 3, 1, 1};

  for (i = 0; i < 4; ++i) {
    res.state[i] = 0;
  }

  for (i = 0; i < 4; ++i) {
    for (j = 0; j < 4; ++j) {
      for (k = 0; k < 4; ++k) {
        *mat(&res, j, i) ^= mulrj(*mat(s, k, i), mixer[(k+4-j) % 4]);
      }
    }
  }
  *s = res;
}

obl_char rotl(obl_char x) {
  return (x << 1) ^ (x >> 7);
}

obl_char aesSbox(obl_char x) {
  obl_char s = 0;
  x = invrj(x);
  for (int i = 0; i < 5; ++i) {
    s ^= x;
    x = rotl(x);
  }
  return s ^ 0x63;
}
void aesSubBytes(AesState *s) {
  for (int i = 0; i < 16; ++i) {
    s->state[i] = aesSbox(s->state[i]);
  }
}

obliv unsigned aesKeyCore(obliv unsigned x, int iter) {
  obliv int rv = 0;
  x = ((x<<24) ^ (x>>8));
  for (int i = 3; i >= 0; --i) {
    rv = (rv << 8) ^ aesSbox((x >> i*8) & 0xff);
  }
  return rv ^ exprj(2, iter - 1);
}

obliv unsigned packBytes(const obl_char *buf) {
  return buf[0] ^ (buf[1] << 8) ^ (buf[2] << 16) ^ (buf[3] << 24);
}

void unpackBytes(obl_char *buf, obliv unsigned r) {
  buf[0] = (r & 0xff);
  buf[1] = ((r>> 8) & 0xff);
  buf[2] = ((r>>16) & 0xff);
  buf[3] = ((r>>24) & 0xff);
}

void aesKeyExpand(obl_char *buf) {
  int i = 1, j, k, n = BLOCK_SIZE;
  for (j = BLOCK_SIZE; j < EXPANDED_KEY_SIZE; ++i, j += BLOCK_SIZE) {
    unpackBytes(buf + j, aesKeyCore(packBytes(buf+j-4), i) ^ packBytes(buf+j-n));
    for (k = 4; k < BLOCK_SIZE; ++k) {
      buf[j + k] = buf[j + k - 4] ^ buf[j + k - n];
    }
  }
}

void aes_encrypt(obl_char *block, const obl_char *key) {
  obl_char buf[EXPANDED_KEY_SIZE];
  int i,r;
  AesState s;
  for (i = 0; i < BLOCK_SIZE; ++i) {
    s.state[i] = block[i];
  }
  for (i = 0; i < BLOCK_SIZE; ++i) {
    buf[i] = key[i];
  }
  aesKeyExpand(buf);
  //fprintf(stderr,"Time at key expansion: %lf s\n",wallClock()-lap);
  for (i = 0; i < BLOCK_SIZE; ++i) {
    s.state[i] ^= buf[i];
  }
  for (r = 1; r <= ROUNDS; ++r) {
    aesSubBytes(&s);
    aesShiftRows(&s);
    if (r < ROUNDS) {
      aesMixCols(&s);
    }
    for (i = 0; i < BLOCK_SIZE; ++i) {
      s.state[i] ^= buf[i + r*BLOCK_SIZE];
    }
  }
  for (i = 0; i < BLOCK_SIZE; ++i) {
    block[i] = s.state[i];
  }
}
