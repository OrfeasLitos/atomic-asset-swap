#include <obliv.oh>
#include <stdio.h>
#include <assert.h>
#include <openssl/sha.h>

#include "../obliv-c/test/oblivc/common/util.h"
#include "asset-swap.h"

void asset_swap(void* vargs) {
  ProtocolIO *args = (ProtocolIO*) vargs;

  obliv unsigned char *asset_hash;
  asset_hash = args->asset_hash;

  int asset_plain_size = ocBroadcastInt(args->asset_plain_size, SELLER);

  obliv unsigned char asset_plain[MAX_ASSET_PLAIN_SIZE];
  feedOblivCharArray(
    asset_plain, args->asset_plain,
    asset_plain_size, SELLER
  );

  double t1 = wallClock();
  // TODO: fill in actual protocol
  double t2 = wallClock() - t1;

  /* Run by Seller right after running GC
   * - args->secret is GC output
   * - args->secret_hash has been sent by Buyer
   *
   * assert(!strcmp(secret_hash(args->secret), args->secret_hash));
   */

  /* Run in GC
   * - args->asset_plain is GC input
   * - args->asset_hash is public information
   *
   * assert(!strcmp(asset_hash(args->asset_plain), args->asset_hash));
   */

  /* Run in GC
   * - args->asset_cipher is hardcoded in GC
   *   (Buyer hardcodes it after receiving from Seller)
   * - args->asset_plain is GC input
   *
   * assert(!strcmp(decrypt(args->asset_cipher), args->asset_plain));
   */

  /* Run in GC
   * - args->key is GC input
   * - args->key_hash is hardcoded in GC
   *   (Buyer hardcodes it after receiving from Seller)
   * assert(!strcmp(sha256(args->key), args->key_hash));
   */

  printf("time: %f\n", t2);
}
