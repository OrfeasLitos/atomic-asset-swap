#ifndef OBLIV_OH
#define OBLIV_OH

// Runtime type info: these functions are no longer used anywhere. Remove?
// All the protoType fields and DYN_FUN macros will also be unnecessary.
bool ocInDebugProto(void);
bool ocInNpProto(void);
void ocNpSetBroadcast1(bool v);
bool ocNpGetBroadcast1(void);

#ifdef __oblivious_c
void setupOblivBool(OblivInputs* spec, obliv bool* dest, bool v);
void setupOblivChar(OblivInputs* spec, obliv char* dest, char v);
void setupOblivInt(OblivInputs* spec, obliv int* dest, int v);
void setupOblivShort(OblivInputs* spec, obliv short* dest, short v);
void setupOblivLong(OblivInputs* spec, obliv long* dest, long v);
void setupOblivLLong(OblivInputs* spec, obliv long long * dest, long long v);
void setupOblivFloat(OblivInputs* spec, obliv float *dest, float v);

void feedOblivInputs(OblivInputs* spec, size_t count, int party);

// Single variable feeding convenience functions
obliv bool feedOblivBool(bool v,int party);
obliv char feedOblivChar(char v,int party);
obliv short feedOblivShort(short v,int party);
obliv int feedOblivInt(int v,int party);
obliv long feedOblivLong(long v,int party);
obliv long long feedOblivLLong(long long v,int party);
obliv float feedOblivFloat(float v, int party);

// Feed an entire array. Uses the setup functions above
void  feedOblivBoolArray(obliv bool  dest[],const bool  src[],size_t n,
                         int party);
void  feedOblivCharArray(obliv char  dest[],const char  src[],size_t n,
                         int party);
void feedOblivShortArray(obliv short dest[],const short src[],size_t n,
                         int party);
void   feedOblivIntArray(obliv int   dest[],const int   src[],size_t n,
                         int party);
void  feedOblivLongArray(obliv long  dest[],const long  src[],size_t n,
                         int party);
void feedOblivLLongArray(obliv long long dest[],const long long src[],size_t n,
                         int party);

// Return value true means 'dest' was actually written to.
//   Write may not occur if I am not the intended party, or this is
//   a multithreaded protocol where only one thread writes
bool revealOblivBool(bool* dest, obliv bool src,int party);
bool revealOblivChar(char* dest, obliv char src,int party);
bool revealOblivInt(int* dest, obliv int src,int party);
bool revealOblivShort(short* dest, obliv short src,int party);
bool revealOblivLong(long* dest, obliv long src,int party);
bool revealOblivLLong(long long* dest, obliv long long src,int party);
bool revealOblivFloat(float *dest, obliv float src, int party);

bool  revealOblivBoolArray(bool dest[],  obliv bool src[],  size_t n,
						   int party);
bool  revealOblivCharArray(char dest[],  obliv char src[],  size_t n,
						   int party);
bool   revealOblivIntArray(int dest[],   obliv int src[],   size_t n,
						   int party);
bool revealOblivShortArray(short dest[], obliv short src[], size_t n,
						   int party);
bool  revealOblivLongArray(long dest[],  obliv long src[],  size_t n,
						   int party);
bool revealOblivLLongArray(long long dest[], obliv long long src[], size_t n,
						   int party);
#endif

bool ocBroadcastBool(bool v,int party);
char ocBroadcastChar(char v,int party);
int ocBroadcastInt(int v,int party);
short ocBroadcastShort(short v,int party);
long ocBroadcastLong(long v,int party);
long long ocBroadcastLLong(long long v,int party);

void  ocBroadcastBoolArray(bool dest[],   bool src[], size_t n, int party);
void  ocBroadcastCharArray(char dest[],   char src[], size_t n, int party);
void   ocBroadcastIntArray(int dest[],     int src[], size_t n, int party);
void ocBroadcastShortArray(short dest[], short src[], size_t n, int party);
void  ocBroadcastLongArray(long dest[],   long src[], size_t n, int party);
void ocBroadcastLLongArray(long long dest[], long long src[], size_t n,
							int party);

uint64_t yaoGateCount(void);
#endif
